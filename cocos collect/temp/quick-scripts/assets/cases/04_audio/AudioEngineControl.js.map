{"version":3,"sources":["AudioEngineControl.js"],"names":["cc","Class","extends","Component","properties","audio","type","AudioClip","default","label","Label","_updateLabel","string","audioPool","length","maxNum","onLoad","audioEngine","getMaxAudioInstance","forEach","name","warn","removeAudio","id","idx","indexOf","splice","play","push","setFinishCallback","bind","stopAll","pauseAll","resumeAll"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,eAAO;AACHC,kBAAMN,GAAGO,SADN;AAEHC,qBAAS;AAFN,SADC;;AAMRC,eAAO;AACHH,kBAAMN,GAAGU,KADN;AAEHF,qBAAS;AAFN;AANC,KAHP;;AAeLG,gBAfK,0BAeW;AACZ,aAAKF,KAAL,CAAWG,MAAX,GAAoB,eAAe,KAAKC,SAAL,CAAeC,MAA9B,GAAuC,KAAvC,GAA+C,KAAKC,MAAxE;AACH,KAjBI;AAmBLC,UAnBK,oBAmBK;AACN,aAAKD,MAAL,GAAcf,GAAGiB,WAAH,CAAeC,mBAAf,EAAd;AACA,aAAKL,SAAL,GAAiB,EAAjB;AACA,aAAKF,YAAL;;AAEA;AACA,SAAC,WAAD,EAAc,YAAd,EAA4BQ,OAA5B,CAAoC,UAAUC,IAAV,EAAgB;AAChD,gBAAI,CAACpB,GAAGiB,WAAH,CAAeG,IAAf,CAAL,EAA2B;AACvBpB,mBAAGqB,IAAH,CAAQ,MAAMD,IAAN,GAAa,gBAArB;AACH;AACJ,SAJD;AAKH,KA9BI;AAgCLE,eAhCK,uBAgCQC,EAhCR,EAgCY;AACb,YAAIC,MAAM,KAAKX,SAAL,CAAeY,OAAf,CAAuBF,EAAvB,CAAV;AACA,YAAIC,MAAM,CAAC,CAAX,EAAc;AACV,iBAAKX,SAAL,CAAea,MAAf,CAAsBF,GAAtB,EAA2B,CAA3B;AACH;AACD,aAAKb,YAAL;AACH,KAtCI;AAwCLgB,QAxCK,kBAwCG;AACJ,YAAI,CAAC,KAAKtB,KAAN,IAAe,KAAKQ,SAAL,CAAeC,MAAf,KAA0B,KAAKC,MAAlD,EAA0D;AAC1D,YAAIQ,KAAKvB,GAAGiB,WAAH,CAAeU,IAAf,CAAoB,KAAKtB,KAAzB,EAAgC,KAAhC,EAAuC,CAAvC,CAAT;AACA,aAAKQ,SAAL,CAAee,IAAf,CAAoBL,EAApB;AACA,aAAKZ,YAAL;;AAEA;AACAX,WAAGiB,WAAH,CAAeY,iBAAf,CAAiCN,EAAjC,EAAqC,KAAKD,WAAL,CAAiBQ,IAAjB,CAAsB,IAAtB,EAA4BP,EAA5B,CAArC;AACH,KAhDI;AAkDLQ,WAlDK,qBAkDM;AACP/B,WAAGiB,WAAH,CAAec,OAAf;AACA,aAAKlB,SAAL,GAAiB,EAAjB;AACA,aAAKF,YAAL;AACH,KAtDI;AAwDLqB,YAxDK,sBAwDO;AACRhC,WAAGiB,WAAH,CAAee,QAAf;AACH,KA1DI;AA4DLC,aA5DK,uBA4DQ;AACTjC,WAAGiB,WAAH,CAAegB,SAAf;AACH;AA9DI,CAAT","file":"AudioEngineControl.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\cases\\04_audio","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        audio: {\n            type: cc.AudioClip,\n            default: null\n        },\n\n        label: {\n            type: cc.Label,\n            default: null\n        }\n    },\n\n    _updateLabel () {\n        this.label.string = 'Instance: ' + this.audioPool.length + ' / ' + this.maxNum;\n    },\n\n    onLoad () {\n        this.maxNum = cc.audioEngine.getMaxAudioInstance();\n        this.audioPool = [];\n        this._updateLabel();\n\n        // check deprecated\n        ['playMusic', 'playEffect'].forEach(function (name) {\n            if (!cc.audioEngine[name]) {\n                cc.warn('.' + name + ' is not found!');\n            }\n        });\n    },\n\n    removeAudio (id) {\n        var idx = this.audioPool.indexOf(id);\n        if (idx > -1) {\n            this.audioPool.splice(idx, 1);\n        }\n        this._updateLabel();\n    },\n\n    play () {\n        if (!this.audio || this.audioPool.length === this.maxNum) return;\n        var id = cc.audioEngine.play(this.audio, false, 1);\n        this.audioPool.push(id);\n        this._updateLabel();\n\n        // set finish callback\n        cc.audioEngine.setFinishCallback(id, this.removeAudio.bind(this, id));\n    },\n\n    stopAll () {\n        cc.audioEngine.stopAll();\n        this.audioPool = [];\n        this._updateLabel();\n    },\n\n    pauseAll () {\n        cc.audioEngine.pauseAll();\n    },\n\n    resumeAll () {\n        cc.audioEngine.resumeAll();\n    },\n});\n"]}