{"version":3,"sources":["NodeGenerator.js"],"names":["cc","Class","extends","Component","properties","prefab","Prefab","hint","Label","regionOrigin","Vec2","regionSize","Size","onLoad","schedule","generateNode","_pool","NodePool","_count","monster","get","instantiate","string","addComponent","x","Math","floor","random","width","y","height","angle","PI","dx","cos","dy","sin","runAction","sequence","moveBy","callFunc","removeNode","node","addChild","sender","put"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,gBAAQL,GAAGM,MADH;AAERC,cAAMP,GAAGQ,KAFD;AAGRC,sBAAcT,GAAGU,IAHT;AAIRC,oBAAYX,GAAGY;AAJP,KAHP;;AAUL;AACAC,YAAQ,kBAAY;AAChB,aAAKC,QAAL,CAAc,KAAKC,YAAnB,EAAiC,CAAjC;AACA,aAAKC,KAAL,GAAa,IAAIhB,GAAGiB,QAAP,CAAgB,aAAhB,CAAb;AACA,aAAKC,MAAL,GAAc,CAAd;AACH,KAfI;;AAiBLH,kBAAc,wBAAY;AACtB,YAAII,UAAU,KAAKH,KAAL,CAAWI,GAAX,EAAd;AACA,YAAI,CAACD,OAAL,EAAc;AACVA,sBAAUnB,GAAGqB,WAAH,CAAe,KAAKhB,MAApB,CAAV;AACA,iBAAKa,MAAL;AACA,iBAAKX,IAAL,CAAUe,MAAV,GAAmB,mBAAmB,KAAKJ,MAA3C;;AAEA;AACAC,oBAAQI,YAAR,CAAqB,aAArB;AACH;AACDJ,gBAAQK,CAAR,GAAY,KAAKf,YAAL,CAAkBe,CAAlB,GAAsBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,KAAKhB,UAAL,CAAgBiB,KAA3C,CAAlC;AACAT,gBAAQU,CAAR,GAAY,KAAKpB,YAAL,CAAkBoB,CAAlB,GAAsBJ,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,KAAKhB,UAAL,CAAgBmB,MAA3C,CAAlC;;AAEA,YAAIC,QAAQN,KAAKE,MAAL,KAAgBF,KAAKO,EAArB,GAA0B,CAAtC;AACA,YAAIC,KAAK,MAAMR,KAAKS,GAAL,CAASH,KAAT,CAAf;AACA,YAAII,KAAK,MAAMV,KAAKW,GAAL,CAASL,KAAT,CAAf;;AAEAZ,gBAAQkB,SAAR,CAAkBrC,GAAGsC,QAAH,CACdtC,GAAGuC,MAAH,CAAU,CAAV,EAAaN,EAAb,EAAiBE,EAAjB,CADc,EAEdnC,GAAGwC,QAAH,CAAY,KAAKC,UAAjB,EAA6B,IAA7B,EAAmCtB,OAAnC,CAFc,CAAlB;;AAKA,aAAKuB,IAAL,CAAUC,QAAV,CAAmBxB,OAAnB;AACH,KAxCI;;AA0CLsB,gBAAY,oBAAUG,MAAV,EAAkBzB,OAAlB,EAA2B;AACnC,aAAKH,KAAL,CAAW6B,GAAX,CAAe1B,OAAf;AACH;AA5CI,CAAT","file":"NodeGenerator.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\cases\\05_scripting\\12_pool","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        prefab: cc.Prefab,\n        hint: cc.Label,\n        regionOrigin: cc.Vec2,\n        regionSize: cc.Size\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        this.schedule(this.generateNode, 2);\n        this._pool = new cc.NodePool('PoolHandler');\n        this._count = 0;\n    },\n    \n    generateNode: function () {\n        var monster = this._pool.get();\n        if (!monster) {\n            monster = cc.instantiate(this.prefab);\n            this._count++;\n            this.hint.string = 'Node Created: ' + this._count;\n        \n            // Add pool handler component which will control the touch event\n            monster.addComponent('PoolHandler');\n        }\n        monster.x = this.regionOrigin.x + Math.floor(Math.random() * this.regionSize.width);\n        monster.y = this.regionOrigin.y + Math.floor(Math.random() * this.regionSize.height);\n        \n        var angle = Math.random() * Math.PI * 2;\n        var dx = 500 * Math.cos(angle);\n        var dy = 500 * Math.sin(angle);\n        \n        monster.runAction(cc.sequence(\n            cc.moveBy(5, dx, dy),\n            cc.callFunc(this.removeNode, this, monster)\n        ));\n        \n        this.node.addChild(monster);\n    },\n    \n    removeNode: function (sender, monster) {\n        this._pool.put(monster);\n    }\n});\n"]}