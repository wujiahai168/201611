{"version":3,"sources":["Puzzle.js"],"names":["MoveDirection","cc","Enum","NONE","UP","DOWN","LEFT","RIGHT","minTilesCount","mapMoveStep","minMoveValue","Class","extends","Component","editor","requireComponent","TiledMap","properties","_touchStartPos","default","serializable","_touching","_isMapLoaded","floorLayerName","barrierLayerName","objectGroupName","startObjectName","successObjectName","onLoad","_player","node","getChildByName","active","systemEvent","on","SystemEvent","EventType","KEY_UP","_onKeyPressed","Node","TOUCH_START","event","touch","getLocation","TOUCH_END","_succeedLayer","touchPos","movedX","x","movedY","y","movedXValue","Math","abs","movedYValue","newTile","v2","_curTile","mapMoveDir","_tryMoveToNewTile","onDestroy","off","restartGame","_initMapPos","_startTile","_updatePlayerPos","start","err","getParent","_tiledMap","getComponent","objectGroup","getObjectGroup","startObj","getObject","endObj","startPos","endPos","_layerFloor","getLayer","_layerBarrier","_getTilePos","_endTile","setPosition","visibleRect","bottomLeft","pos","getPositionAt","posInPixel","mapSize","getContentSize","tileSize","getTileSize","floor","width","height","keyCode","macro","KEY","up","down","left","right","getMapSize","getTileGIDAt","log","_tryMoveMap","equals","moveDir","mapContentSize","mapPos","getPosition","playerPos","viewSize","size","minDisX","minDisY","disX","disY","newPos","minX","maxX","minY","bottom","maxY"],"mappings":"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","file":"Puzzle.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\cases\\tiledmap","sourcesContent":["\nvar MoveDirection = cc.Enum({\n    NONE: 0,\n    UP: 1,\n    DOWN: 2,\n    LEFT: 3,\n    RIGHT: 4\n});\n\nvar minTilesCount = 2;\nvar mapMoveStep = 1;\nvar minMoveValue = 50;\n\ncc.Class({\n    extends: cc.Component,\n    editor: {\n        requireComponent: cc.TiledMap\n    },\n\n    properties: {\n        _touchStartPos: {\n            default: null,\n            serializable: false,\n        },\n        _touching: {\n            default: false,\n            serializable: false,\n        },\n\n        _isMapLoaded : {\n            default: false,\n            serializable: false,\n        },\n\n        floorLayerName: {\n            default: 'floor'\n        },\n\n        barrierLayerName: {\n            default: 'barrier'\n        },\n\n        objectGroupName: {\n            default: 'players'\n        },\n\n        startObjectName: {\n            default:'SpawnPoint'\n        },\n\n        successObjectName: {\n            default:'SuccessPoint'\n        }\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        this._player = this.node.getChildByName('player');\n        if (! this._isMapLoaded) {\n            this._player.active = false;\n        }\n\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this._onKeyPressed, this);\n\n        this.node.on(cc.Node.EventType.TOUCH_START, (event) => {\n            this._touching = true;\n            this._touchStartPos = event.touch.getLocation();\n        });\n        this.node.on(cc.Node.EventType.TOUCH_END, (event) => {\n            if (!this._touching || !this._isMapLoaded || this._succeedLayer.active) return;\n\n            this._touching = false;\n            var touchPos = event.touch.getLocation();\n            var movedX = touchPos.x - this._touchStartPos.x;\n            var movedY = touchPos.y - this._touchStartPos.y;\n            var movedXValue = Math.abs(movedX);\n            var movedYValue = Math.abs(movedY);\n            if (movedXValue < minMoveValue && movedYValue < minMoveValue) {\n                // touch moved not enough\n                return;\n            }\n\n            var newTile = cc.v2(this._curTile.x, this._curTile.y);\n            var mapMoveDir = MoveDirection.NONE;\n            if (movedXValue >= movedYValue) {\n                // move to right or left\n                if (movedX > 0) {\n                    newTile.x += 1;\n                    mapMoveDir = MoveDirection.LEFT;\n                } else {\n                    newTile.x -= 1;\n                    mapMoveDir = MoveDirection.RIGHT;\n                }\n            } else {\n                // move to up or down\n                if (movedY > 0) {\n                    newTile.y -= 1;\n                    mapMoveDir = MoveDirection.DOWN;\n                } else {\n                    newTile.y += 1;\n                    mapMoveDir = MoveDirection.UP;\n                }\n            }\n            this._tryMoveToNewTile(newTile, mapMoveDir);\n        });\n    },\n\n    onDestroy () {\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this._onKeyPressed, this);\n    },\n\n    restartGame: function() {\n        this._succeedLayer.active = false;\n        this._initMapPos();\n        this._curTile = this._startTile;\n        this._updatePlayerPos();\n    },\n\n    start: function(err) {\n        if (err) return;\n\n        // init the map position\n        this._initMapPos();\n\n        // init the succeed layer\n        this._succeedLayer = this.node.getParent().getChildByName('succeedLayer');\n        this._succeedLayer.active = false;\n\n        // init the player position\n        this._tiledMap = this.node.getComponent('cc.TiledMap');\n        var objectGroup = this._tiledMap.getObjectGroup(this.objectGroupName);\n        if (!objectGroup) return;\n\n        var startObj = objectGroup.getObject(this.startObjectName);\n        var endObj = objectGroup.getObject(this.successObjectName);\n        if (!startObj || !endObj) return;\n\n        var startPos = cc.v2(startObj.x, startObj.y);\n        var endPos = cc.v2(endObj.x, endObj.y);\n\n        this._layerFloor = this._tiledMap.getLayer(this.floorLayerName);\n        this._layerBarrier = this._tiledMap.getLayer(this.barrierLayerName);\n        if (!this._layerFloor || !this._layerBarrier) return;\n\n        this._curTile = this._startTile = this._getTilePos(startPos);\n        this._endTile = this._getTilePos(endPos);\n\n        if (this._player) {\n            this._updatePlayerPos();\n            this._player.active = true;\n        }\n\n        this._isMapLoaded = true;\n    },\n\n    _initMapPos: function() {\n        this.node.setPosition(cc.visibleRect.bottomLeft);\n    },\n\n    _updatePlayerPos: function() {\n        var pos = this._layerFloor.getPositionAt(this._curTile);\n        this._player.setPosition(pos);\n    },\n\n    _getTilePos: function(posInPixel) {\n        var mapSize = this.node.getContentSize();\n        var tileSize = this._tiledMap.getTileSize();\n        var x = Math.floor(posInPixel.x / tileSize.width);\n        var y = Math.floor((mapSize.height - posInPixel.y) / tileSize.height);\n\n        return cc.v2(x, y);\n    },\n\n    _onKeyPressed: function(event) {\n        if (!this._isMapLoaded || this._succeedLayer.active) return;\n\n        var newTile = cc.v2(this._curTile.x, this._curTile.y);\n        var mapMoveDir = MoveDirection.NONE;\n        switch(event.keyCode) {\n            case cc.macro.KEY.up:\n                newTile.y -= 1;\n                mapMoveDir = MoveDirection.DOWN;\n                break;\n            case cc.macro.KEY.down:\n                newTile.y += 1;\n                mapMoveDir = MoveDirection.UP;\n                break;\n            case cc.macro.KEY.left:\n                newTile.x -= 1;\n                mapMoveDir = MoveDirection.RIGHT;\n                break;\n            case cc.macro.KEY.right:\n                newTile.x += 1;\n                mapMoveDir = MoveDirection.LEFT;\n                break;\n            default:\n                return;\n        }\n\n        this._tryMoveToNewTile(newTile, mapMoveDir);\n    },\n\n    _tryMoveToNewTile: function(newTile, mapMoveDir) {\n        var mapSize = this._tiledMap.getMapSize();\n        if (newTile.x < 0 || newTile.x >= mapSize.width) return;\n        if (newTile.y < 0 || newTile.y >= mapSize.height) return;\n\n        if (this._layerBarrier.getTileGIDAt(newTile)) {\n            cc.log('This way is blocked!');\n            return false;\n        }\n\n        // update the player position\n        this._curTile = newTile;\n        this._updatePlayerPos();\n\n        // move the map if necessary\n        this._tryMoveMap(mapMoveDir);\n\n        // check the player is success or not\n        if (this._curTile.equals(this._endTile)) {\n            cc.log('succeed');\n            this._succeedLayer.active = true;\n        }\n    },\n\n    _tryMoveMap: function(moveDir) {\n        // get necessary data\n        var mapContentSize = this.node.getContentSize();\n        var mapPos = this.node.getPosition();\n        var playerPos = this._player.getPosition();\n        var viewSize = cc.size(cc.visibleRect.width, cc.visibleRect.height);\n        var tileSize = this._tiledMap.getTileSize();\n        var minDisX = minTilesCount * tileSize.width;\n        var minDisY = minTilesCount * tileSize.height;\n\n        var disX = playerPos.x + mapPos.x;\n        var disY = playerPos.y + mapPos.y;\n        var newPos;\n        switch (moveDir) {\n            case MoveDirection.UP:\n                if (disY < minDisY) {\n                    newPos = cc.v2(mapPos.x, mapPos.y + tileSize.height * mapMoveStep);\n                }\n                break;\n            case MoveDirection.DOWN:\n                if (viewSize.height - disY - tileSize.height < minDisY) {\n                    newPos = cc.v2(mapPos.x, mapPos.y - tileSize.height * mapMoveStep);\n                }\n                break;\n            case MoveDirection.LEFT:\n                if (viewSize.width - disX - tileSize.width < minDisX) {\n                    newPos = cc.v2(mapPos.x - tileSize.width * mapMoveStep, mapPos.y);\n                }\n                break;\n            case MoveDirection.RIGHT:\n                if (disX < minDisX) {\n                    newPos = cc.v2(mapPos.x + tileSize.width * mapMoveStep, mapPos.y);\n                }\n                break;\n            default:\n                return;\n        }\n\n        if (newPos) {\n            // calculate the position range of map\n            var minX = viewSize.width - mapContentSize.width - cc.visibleRect.left;\n            var maxX = cc.visibleRect.left.x;\n            var minY = viewSize.height - mapContentSize.height - cc.visibleRect.bottom;\n            var maxY = cc.visibleRect.bottom.y;\n\n            if (newPos.x < minX) newPos.x = minX;\n            if (newPos.x > maxX) newPos.x = maxX;\n            if (newPos.y < minY) newPos.y = minY;\n            if (newPos.y > maxY) newPos.y = maxY;\n\n            if (!newPos.equals(mapPos)) {\n                cc.log('Move the map to new position: ', newPos);\n                this.node.setPosition(newPos);\n            }\n        }\n    }\n});\n"]}